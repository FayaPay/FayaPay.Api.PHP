<?php
/**
 * ChargeDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  FayaPay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FayaPay API
 *
 * FayaPay API
 *
 * OpenAPI spec version: 1
 * Contact: support@fayapay.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FayaPay\Model;

use \ArrayAccess;
use \FayaPay\ObjectSerializer;

/**
 * ChargeDTO Class Doc Comment
 *
 * @category Class
 * @package  FayaPay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ChargeDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ChargeDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'object' => 'string',
        'id' => 'string',
        'reference' => 'string',
        'source_id' => 'string',
        'customer_id' => 'string',
        'amount' => 'int',
        'amount_refunded' => 'int',
        'fee' => 'int',
        'currency' => 'string',
        'statement_descriptor' => 'string',
        'description' => 'string',
        'paid' => 'bool',
        'metadata' => 'map[string,string]',
        'receipt_id' => 'string',
        'receipt_email' => 'string',
        'receipt_phone' => 'string',
        'failure_message' => 'string',
        'livemode' => 'bool',
        'created_at' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'object' => null,
        'id' => null,
        'reference' => null,
        'source_id' => null,
        'customer_id' => null,
        'amount' => 'int32',
        'amount_refunded' => 'int32',
        'fee' => 'int32',
        'currency' => null,
        'statement_descriptor' => null,
        'description' => null,
        'paid' => null,
        'metadata' => null,
        'receipt_id' => null,
        'receipt_email' => null,
        'receipt_phone' => null,
        'failure_message' => null,
        'livemode' => null,
        'created_at' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'object' => 'object',
        'id' => 'id',
        'reference' => 'reference',
        'source_id' => 'sourceId',
        'customer_id' => 'customerId',
        'amount' => 'amount',
        'amount_refunded' => 'amountRefunded',
        'fee' => 'fee',
        'currency' => 'currency',
        'statement_descriptor' => 'statementDescriptor',
        'description' => 'description',
        'paid' => 'paid',
        'metadata' => 'metadata',
        'receipt_id' => 'receiptId',
        'receipt_email' => 'receiptEmail',
        'receipt_phone' => 'receiptPhone',
        'failure_message' => 'failureMessage',
        'livemode' => 'livemode',
        'created_at' => 'createdAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'object' => 'setObject',
        'id' => 'setId',
        'reference' => 'setReference',
        'source_id' => 'setSourceId',
        'customer_id' => 'setCustomerId',
        'amount' => 'setAmount',
        'amount_refunded' => 'setAmountRefunded',
        'fee' => 'setFee',
        'currency' => 'setCurrency',
        'statement_descriptor' => 'setStatementDescriptor',
        'description' => 'setDescription',
        'paid' => 'setPaid',
        'metadata' => 'setMetadata',
        'receipt_id' => 'setReceiptId',
        'receipt_email' => 'setReceiptEmail',
        'receipt_phone' => 'setReceiptPhone',
        'failure_message' => 'setFailureMessage',
        'livemode' => 'setLivemode',
        'created_at' => 'setCreatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'object' => 'getObject',
        'id' => 'getId',
        'reference' => 'getReference',
        'source_id' => 'getSourceId',
        'customer_id' => 'getCustomerId',
        'amount' => 'getAmount',
        'amount_refunded' => 'getAmountRefunded',
        'fee' => 'getFee',
        'currency' => 'getCurrency',
        'statement_descriptor' => 'getStatementDescriptor',
        'description' => 'getDescription',
        'paid' => 'getPaid',
        'metadata' => 'getMetadata',
        'receipt_id' => 'getReceiptId',
        'receipt_email' => 'getReceiptEmail',
        'receipt_phone' => 'getReceiptPhone',
        'failure_message' => 'getFailureMessage',
        'livemode' => 'getLivemode',
        'created_at' => 'getCreatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['object'] = isset($data['object']) ? $data['object'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['source_id'] = isset($data['source_id']) ? $data['source_id'] : null;
        $this->container['customer_id'] = isset($data['customer_id']) ? $data['customer_id'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['amount_refunded'] = isset($data['amount_refunded']) ? $data['amount_refunded'] : null;
        $this->container['fee'] = isset($data['fee']) ? $data['fee'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['statement_descriptor'] = isset($data['statement_descriptor']) ? $data['statement_descriptor'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['paid'] = isset($data['paid']) ? $data['paid'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
        $this->container['receipt_id'] = isset($data['receipt_id']) ? $data['receipt_id'] : null;
        $this->container['receipt_email'] = isset($data['receipt_email']) ? $data['receipt_email'] : null;
        $this->container['receipt_phone'] = isset($data['receipt_phone']) ? $data['receipt_phone'] : null;
        $this->container['failure_message'] = isset($data['failure_message']) ? $data['failure_message'] : null;
        $this->container['livemode'] = isset($data['livemode']) ? $data['livemode'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['amount_refunded'] === null) {
            $invalidProperties[] = "'amount_refunded' can't be null";
        }
        if ($this->container['fee'] === null) {
            $invalidProperties[] = "'fee' can't be null";
        }
        if ($this->container['paid'] === null) {
            $invalidProperties[] = "'paid' can't be null";
        }
        if ($this->container['livemode'] === null) {
            $invalidProperties[] = "'livemode' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['amount'] === null) {
            return false;
        }
        if ($this->container['amount_refunded'] === null) {
            return false;
        }
        if ($this->container['fee'] === null) {
            return false;
        }
        if ($this->container['paid'] === null) {
            return false;
        }
        if ($this->container['livemode'] === null) {
            return false;
        }
        if ($this->container['created_at'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets object
     *
     * @return string
     */
    public function getObject()
    {
        return $this->container['object'];
    }

    /**
     * Sets object
     *
     * @param string $object String representing the object’s type. Objects of the same type share the same value. Value is `charge`
     *
     * @return $this
     */
    public function setObject($object)
    {
        $this->container['object'] = $object;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Unique identifier for the object.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference Unique reference you provided.
     *
     * @return $this
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets source_id
     *
     * @return string
     */
    public function getSourceId()
    {
        return $this->container['source_id'];
    }

    /**
     * Sets source_id
     *
     * @param string $source_id ID of the source that was charged.
     *
     * @return $this
     */
    public function setSourceId($source_id)
    {
        $this->container['source_id'] = $source_id;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return string
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param string $customer_id ID of the customer this charge belongs to if one exists.
     *
     * @return $this
     */
    public function setCustomerId($customer_id)
    {
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int $amount A positive integer in the smallest currency unit (e.g. 100 pesewas to charge 1.00GHS) representing how much was charged.
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets amount_refunded
     *
     * @return int
     */
    public function getAmountRefunded()
    {
        return $this->container['amount_refunded'];
    }

    /**
     * Sets amount_refunded
     *
     * @param int $amount_refunded An integer in the smallest currency unit (e.g. 100 pesewas equals 1.00GHS) representing how much of the charge was refunded. This can be less than Amount if the refund was partial.
     *
     * @return $this
     */
    public function setAmountRefunded($amount_refunded)
    {
        $this->container['amount_refunded'] = $amount_refunded;

        return $this;
    }

    /**
     * Gets fee
     *
     * @return int
     */
    public function getFee()
    {
        return $this->container['fee'];
    }

    /**
     * Sets fee
     *
     * @param int $fee A positive integer in the smallest currency unit (e.g. 100 pesewas to charge 1.00GHS) representing how much was charged as fees.
     *
     * @return $this
     */
    public function setFee($fee)
    {
        $this->container['fee'] = $fee;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency Three-letter ISO currency code. e.g. `GHS`
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets statement_descriptor
     *
     * @return string
     */
    public function getStatementDescriptor()
    {
        return $this->container['statement_descriptor'];
    }

    /**
     * Sets statement_descriptor
     *
     * @param string $statement_descriptor Extra information about the charge. This appears on your customer’s statement.
     *
     * @return $this
     */
    public function setStatementDescriptor($statement_descriptor)
    {
        $this->container['statement_descriptor'] = $statement_descriptor;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description An arbitrary string attached to the charge. Mainly useful for displaying to customers e.g. in receipts and invoices.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets paid
     *
     * @return bool
     */
    public function getPaid()
    {
        return $this->container['paid'];
    }

    /**
     * Sets paid
     *
     * @param bool $paid `true` if the charge succeeded, or was successfully authorized for later capture.
     *
     * @return $this
     */
    public function setPaid($paid)
    {
        $this->container['paid'] = $paid;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return map[string,string]
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param map[string,string] $metadata Hash of key-value pairs attached to the object.
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets receipt_id
     *
     * @return string
     */
    public function getReceiptId()
    {
        return $this->container['receipt_id'];
    }

    /**
     * Sets receipt_id
     *
     * @param string $receipt_id ID for the receipt sent for this charge. This attribute will be null until a receipt has been sent.
     *
     * @return $this
     */
    public function setReceiptId($receipt_id)
    {
        $this->container['receipt_id'] = $receipt_id;

        return $this;
    }

    /**
     * Gets receipt_email
     *
     * @return string
     */
    public function getReceiptEmail()
    {
        return $this->container['receipt_email'];
    }

    /**
     * Sets receipt_email
     *
     * @param string $receipt_email This is the email address that the receipt for this charge was sent to. This attribute will be null until a receipt has been sent.
     *
     * @return $this
     */
    public function setReceiptEmail($receipt_email)
    {
        $this->container['receipt_email'] = $receipt_email;

        return $this;
    }

    /**
     * Gets receipt_phone
     *
     * @return string
     */
    public function getReceiptPhone()
    {
        return $this->container['receipt_phone'];
    }

    /**
     * Sets receipt_phone
     *
     * @param string $receipt_phone This is the phone number that the receipt for this charge was sent to. This attribute will be null until a receipt has been sent.
     *
     * @return $this
     */
    public function setReceiptPhone($receipt_phone)
    {
        $this->container['receipt_phone'] = $receipt_phone;

        return $this;
    }

    /**
     * Gets failure_message
     *
     * @return string
     */
    public function getFailureMessage()
    {
        return $this->container['failure_message'];
    }

    /**
     * Sets failure_message
     *
     * @param string $failure_message Detailed failure message if the state of the charge is `Failed`. Can be displayed to the user.
     *
     * @return $this
     */
    public function setFailureMessage($failure_message)
    {
        $this->container['failure_message'] = $failure_message;

        return $this;
    }

    /**
     * Gets livemode
     *
     * @return bool
     */
    public function getLivemode()
    {
        return $this->container['livemode'];
    }

    /**
     * Sets livemode
     *
     * @param bool $livemode `true` if the object exists in live mode or `false` if the object exists in test mode.
     *
     * @return $this
     */
    public function setLivemode($livemode)
    {
        $this->container['livemode'] = $livemode;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at Time at which the object was created.
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


